import { HelperEventEmitter } from 'coc-helper';
import { Disposable, Uri } from 'coc.nvim';
import { Socket } from 'socket.io';
import { IconPaths, ServerConnectorEvents, SocketClientEvents, SocketServerEvents } from './types';
export declare type ServerRouteParams = {
    title: string;
    routeName: string;
    localResourceRoots?: Uri[];
};
export declare type ServerBinded = {
    port: number;
    host: string;
};
export declare type ServerRoute = ServerRouteParams & ServerBinded;
declare type ServerSocket = Socket<SocketServerEvents, SocketClientEvents>;
export declare function baseHost(binded: ServerBinded): string;
declare class SocketManager {
    readonly sockets: Map<string, Map<string, ServerSocket>>;
    register(routeName: string, socket: Socket): number;
    unregisterAll(routeName: string): number;
    unregister(routeName: string, socket: Socket): number;
    get(routeName: string): Map<string, ServerSocket> | undefined;
}
declare class CocWebviewServer implements Disposable {
    private static staticRoutes;
    debug: boolean;
    private instance?;
    private wsInstance?;
    readonly routes: Map<string, ServerRoute>;
    readonly sockets: SocketManager;
    readonly states: Map<string, unknown>;
    readonly connectors: Map<string, ServerConnector>;
    binded?: ServerBinded;
    tryCreate(): Promise<ServerBinded>;
    private bindRoutes;
    private bindWs;
    private tryStart;
    dispose(): void;
    private genHtml;
    getUrl(route: ServerRoute): string;
    add(routeParams: ServerRouteParams): Promise<{
        connector: ServerConnector;
        route: ServerRoute;
    }>;
    private emitConnector;
    private createConnector;
    /**
     * Open route in browser or CLI
     */
    openRoute(route: ServerRoute): void;
    /**
     * Open route in browser or CLI
     */
    openByRouteName(routeName: string): void;
    removeAndDispose(routeName: string): void;
}
export declare class ServerConnector {
    private server;
    readonly routeName: string;
    readonly events: HelperEventEmitter<ServerConnectorEvents>;
    constructor(server: CocWebviewServer, routeName: string);
    waitSocket<T>(run: (socket: ServerSocket) => T): Promise<T[]>;
    setIconPath(uris: IconPaths): Promise<void>;
    setTitle(content: string): Promise<void>;
    setHtml(content: string): Promise<void>;
    postMessage(message: any): Promise<boolean>;
    reveal(options: {
        openURL: boolean;
    }): Promise<boolean>;
    disposeSockets(): Promise<void>;
    dispose(): void;
}
export declare const cocWebviewServer: CocWebviewServer;
export {};
